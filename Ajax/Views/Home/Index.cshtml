@{
    ViewBag.Title = "Let the Fun Begin";
}


<h3>Using GET</h3>
<div>
    User Text: <input type="text" id="user-request" name="user-request" class="form-control" />
    Server Text: <input type="text" id="server-response" name="server-response" class="form-control" />
</div>
<h3>Using POST</h3>
<div>
    User Text: <input type="text" id="user-request-post" name="user-request" class="form-control" />
    Server Text: <input type="text" id="server-response-post" name="server-response-post" class="form-control" />
</div>
<hr />
<p>
    This is an exploratory exercise. If you open the Network tab in Chrome Developer Tools, you can examine the Ajax requests and compare the GET vs. the POST.
    I did a project that used jquery Ajax calls, but I was still a bit mystified by it, so I wanted to do this exercise to get a better understanding.
</p>

@section scripts
{
    <script>

        // Both $.get and $.post methods load data from the server.
        // See https://api.jquery.com/category/ajax/shorthand-methods/

        // The GET request appends the data to the url as a query string

        // More info: https://api.jquery.com/jQuery.get/

        $("#user-request").keyup(function () {
            var url = "/Home/ConvertLowerToUpper";
            var text = $(this).val();
            $.get(url, { input: text }, function (data) {
                $("#server-response").val(data);
            });
        });

        // The POST request does not append the data to the url as a query string

        // More info: https://api.jquery.com/jQuery.post/

        $("#user-request-post").keyup(function () {
            var url = "/Home/ConvertLowerToUpper";
            var text = $(this).val();
            $.post(url, { input: text }, function (data) {
                $("#server-response-post").val(data);
            });
        });


    </script>
}
